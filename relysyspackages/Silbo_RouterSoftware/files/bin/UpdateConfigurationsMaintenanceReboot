#!/bin/sh
. /lib/functions.sh

InterfaceCfgDirPath="/reap/etc"
InterfaceEth0="/etc/network/eth0.cfg"
InterfaceFile="/etc/network/interfaces"
ConfigBridgeInterface="/etc/init.d/BridgeConfiguration"
EnableDefaultGateway="/etc/init.d/EnableDefaultGateway"
IPTablesMode="/etc/init.d/IPTablesMode"
InitEthernet="/etc/init.d/initethernet"
EthernetDefaultGateway="/reap/etc/EthernetDefaultGateway.cfg"

#Interfaces  Configuration 
EthernetEth0ConfigureCfgPath="${InterfaceCfgDirPath}/EthernetEth0Setting"
EthernetEth1ConfigureCfgPath="${InterfaceCfgDirPath}/EthernetEth1Setting"
EthernetEth2ConfigureCfgPath="${InterfaceCfgDirPath}/EthernetEth2Setting"
BridgeConfigureCfgPath="${InterfaceCfgDirPath}/BridgeConfiguration"
ModeOneConfigureCfgPath="${InterfaceCfgDirPath}/ModeOneConfig"
ModeTwoConfigureCfgPath="${InterfaceCfgDirPath}/ModeTwoConfig"
ModeSettingConfigureCfgPath="${InterfaceCfgDirPath}/ModeSetting"
EthernetDefaultCfgPath="${InterfaceCfgDirPath}/EthernetDefaultGateway"
RmnetDefaultCfgPath="${InterfaceCfgDirPath}/RmnetDefaultGateway"
NetworkInterfaceEventfile="Mode"
NetworkInterfaceConfigureEventSection="generalsettings"

#Upgrade Manager
UpgradeManagerGenericFile="UpgradeManagerGeneric"
UpgradeManagerGenericSection="global"

UpgradeManagerMaintenaceRebootGenericFile="MaintenanceRebootAction"
UpgradeManagerMaintenaceRebootGenericSection="event"

usage()
{
    cat <<EOF
    Usage:  ${0##*/} <ACTION>

    ACTIONS:
    ucitoappcfg  update application configuration using UCI
EOF
}

UpdateInterfaces()
{
    echo "Updating Interface configuration "
  
    config_load "$NetworkInterfaceEventfile"
    config_get  ModeSettings  "$NetworkInterfaceConfigureEventSection"  ModeSettings
    if [ "$ModeSettings" = "1" ]
    then
    {
        echo "Mode1=1"
        echo "Mode2=0"
    } > "${ModeSettingConfigureCfgPath}.cfg"
        
        config_get  eth0   "$NetworkInterfaceConfigureEventSection"  eth0
        config_get  ecm0   "$NetworkInterfaceConfigureEventSection"  ecm0
        config_get  eth1  "$NetworkInterfaceConfigureEventSection"  eth1
        config_get  eth2   "$NetworkInterfaceConfigureEventSection"  eth2

        {
            echo "eth0=$eth0"
            echo "ecm0=$ecm0"
            echo "eth1=$eth1"
            echo "eth2=$eth2"
        } > "${ModeOneConfigureCfgPath}.cfg"
        
        config_get  Gateway1  "$NetworkInterfaceConfigureEventSection"  Gateway1   
        if [ "$Gateway1" = "rmnet_data0" ]
        then
        {
			#uci set modem.rmnet_data0.dataenable='1' 2>&1
            #uci set modem.rmnet_data0.monitorenable='1' 2>&1
            #uci commit
            #ubus call interfacemanager update '{}' 2>&1
            echo "Rmnet0Enable=\"1\""
        } > "${RmnetDefaultCfgPath}.cfg"  
        elif [ "$Gateway1" != "rmnet_data0" ]
        then
        {
            echo "Rmnet0Enable=\"0\""
        } > "${RmnetDefaultCfgPath}.cfg"  
        fi
        
        #eth0 default gateway
        ReplaceEthernetEnable="EthernetEnable=\"0\""
        ResultEthernetEnable=$(grep -w  "EthernetEnable" ${EthernetDefaultGateway})
        if [ $? -eq 0 ]
        then
            sed -i "s/${ResultEthernetEnable}/${ReplaceEthernetEnable}/" "$EthernetDefaultGateway"
        fi     
        
    elif [ "$ModeSettings" = "2" ] 
    then
    {
        echo "Mode1=0"
        echo "Mode2=1"
    } > "${ModeSettingConfigureCfgPath}.cfg"
        
        config_get  ecm0  "$NetworkInterfaceConfigureEventSection"  ecm0
        config_get  eth1  "$NetworkInterfaceConfigureEventSection"  eth1
        config_get  eth2   "$NetworkInterfaceConfigureEventSection"  eth2

        {
            echo "ecm0=$ecm0"
            echo "eth1=$eth1"
            echo "eth2=$eth2"
        } > "${ModeTwoConfigureCfgPath}.cfg"  
        
        config_get  Gateway2  "$NetworkInterfaceConfigureEventSection"  Gateway2 
        # rmnet_data0 default gateway  
        if [ "$Gateway2" = "rmnet_data0" ]
        then
        {
			#uci set modem.rmnet_data0.dataenable='1' 2>&1
            #uci set modem.rmnet_data0.monitorenable='1' 2>&1
            #uci commit
            #ubus call interfacemanager update '{}' 2>&1
            echo "Rmnet0Enable=\"1\""
        } > "${RmnetDefaultCfgPath}.cfg"  
        elif [ "$Gateway2" != "rmnet_data0" ]
        then
        {
            echo "Rmnet0Enable=\"0\""
        } > "${RmnetDefaultCfgPath}.cfg"  
        fi
                
        #eth0 default gateway
        config_get  EthernetProtocol2             "$NetworkInterfaceConfigureEventSection"  EthernetProtocol2
        config_get  EthernetClientStaticGateway2  "$NetworkInterfaceConfigureEventSection"  EthernetClientStaticGateway2
        config_get  EthernetClientDHCPGateway2    "$NetworkInterfaceConfigureEventSection"  EthernetClientDHCPGateway2
        if [ "$EthernetProtocol2"  =  "static" ]
        then  
            if [ "$Gateway2" = "eth0" ]
            then
            {
                echo "EthernetEnable=\"1\""
                echo "EthernetGatewayIP=$EthernetClientStaticGateway2"
            } > "${EthernetDefaultCfgPath}.cfg"  
            elif [ "$Gateway2" != "eth0" ]
            then
            {
                echo "EthernetEnable=\"0\""
                echo "EthernetGatewayIP=$EthernetClientStaticGateway2"
            } > "${EthernetDefaultCfgPath}.cfg"  
            fi
        elif [ "$EthernetProtocol2"  =  "dhcp" ] 
        then
            if [ "$Gateway2" = "eth0" ]
            then
            {
                echo "EthernetEnable=\"1\""
                echo "EthernetGatewayIP=$EthernetClientDHCPGateway2"
            } > "${EthernetDefaultCfgPath}.cfg"  
            elif [ "$Gateway2" != "eth0" ]
            then
            {
                echo "EthernetEnable=\"0\""
                echo "EthernetGatewayIP=$EthernetClientDHCPGateway2"
            } > "${EthernetDefaultCfgPath}.cfg"  
            fi
        fi  
    fi

     config_get  EthernetMode1  "$NetworkInterfaceConfigureEventSection"  EthernetMode1    
    #********************************ETHERNET Configurations***********************************************#  
     #when Ethernet to be configured as static or Dhcp server  
    if [ "$ModeSettings" = "1" ]  
    then
        #****************************************Ethernet0 eth0  configuration in Mode 1 *****************************#
        config_get  EthernetProtocolMode1Eth0  "$NetworkInterfaceConfigureEventSection"  EthernetProtocolMode1Eth0
        if [  "$EthernetProtocolMode1Eth0"  =  "static"  ]
        then
            config_get  EthernetServerStaticIPMode1Eth0   "$NetworkInterfaceConfigureEventSection"  EthernetServerStaticIPMode1Eth0
            config_get  EthernetServerNetmaskMode1Eth0    "$NetworkInterfaceConfigureEventSection"  EthernetServerNetmaskMode1Eth0
            config_get  EthernetServerBroadcastMode1Eth0  "$NetworkInterfaceConfigureEventSection"  EthernetServerBroadcastMode1Eth0
            {
                echo "EthernetModeEth0=\"server\""
                echo "EthernetEth0=\"eth0\""
                echo "ProtocolEth0=\"$EthernetProtocolMode1Eth0\""
                echo "StaticIPEth0=$EthernetServerStaticIPMode1Eth0"
                echo "BroadcastEth0=$EthernetServerBroadcastMode1Eth0"
                echo "NetmaskEth0=\"$EthernetServerNetmaskMode1Eth0\""
            } > "${EthernetEth0ConfigureCfgPath}.cfg"
        elif [  "$EthernetProtocolMode1Eth0"  =  "dhcp"  ]
        then
            config_get  EthernetServerDHCPIPMode1Eth0         "$NetworkInterfaceConfigureEventSection"  EthernetServerDHCPIPMode1Eth0
            config_get  EthernetServerDHCPBroadcastMode1Eth0  "$NetworkInterfaceConfigureEventSection"  EthernetServerDHCPBroadcastMode1Eth0
            {
                echo "EthernetModeEth0=\"server\""
                echo "EthernetEth0=\"eth0\""
                echo "ProtocolEth0=\"$EthernetProtocolMode1Eth0\""
                echo "DHCPIPEth0=$EthernetServerDHCPIPMode1Eth0"
                echo "DHCPBroadcastEth0=$EthernetServerDHCPBroadcastMode1Eth0"
            } > "${EthernetEth0ConfigureCfgPath}.cfg"
            
        fi

        #****************************************Ethernet1 eth1  configuration in Mode 1 *****************************#

        config_get  EthernetProtocolMode1Eth1  "$NetworkInterfaceConfigureEventSection"  EthernetProtocolMode1Eth1
        if [  "$EthernetProtocolMode1Eth1"  =  "static"  ]
        then
            config_get  EthernetServerStaticIPMode1Eth1   "$NetworkInterfaceConfigureEventSection"  EthernetServerStaticIPMode1Eth1
            config_get  EthernetServerNetmaskMode1Eth1    "$NetworkInterfaceConfigureEventSection"  EthernetServerNetmaskMode1Eth1
            config_get  EthernetServerBroadcastMode1Eth1  "$NetworkInterfaceConfigureEventSection"  EthernetServerBroadcastMode1Eth1
            {
				
                echo "EthernetModeEth1=\"server\""
                echo "EthernetEth1=\"eth1\""
                echo "ProtocolEth1=\"$EthernetProtocolMode1Eth1\""
                echo "StaticIPEth1=$EthernetServerStaticIPMode1Eth1"
                echo "BroadcastEth1=$EthernetServerBroadcastMode1Eth1"
                echo "NetmaskEth1=\"$EthernetServerNetmaskMode1Eth1\""
            } > "${EthernetEth1ConfigureCfgPath}.cfg"
        elif [  "$EthernetProtocolMode1Eth1"  =  "dhcp"  ]
        then
            config_get  EthernetServerDHCPIPMode1Eth1         "$NetworkInterfaceConfigureEventSection"  EthernetServerDHCPIPMode1Eth1
            config_get  EthernetServerDHCPBroadcastMode1Eth1  "$NetworkInterfaceConfigureEventSection"  EthernetServerDHCPBroadcastMode1Eth1
            {
                echo "EthernetModeEth1=\"server\""
                echo "EthernetEth1=\"eth1\""
                echo "ProtocolEth1=\"$EthernetProtocolMode1Eth1\""
                echo "DHCPIPEth1=$EthernetServerDHCPIPMode1Eth1"
                echo "DHCPBroadcastEth1=$EthernetServerDHCPBroadcastMode1Eth1"
            } > "${EthernetEth1ConfigureCfgPath}.cfg"
            
        fi

        #****************************************Ethernet2 eth2  configuration in Mode 1 *****************************#

        config_get  EthernetProtocolMode1Eth2  "$NetworkInterfaceConfigureEventSection"  EthernetProtocolMode1Eth2
        if [  "$EthernetProtocolMode1Eth2"  =  "static"  ]
        then
            config_get  EthernetServerStaticIPMode1Eth2   "$NetworkInterfaceConfigureEventSection"  EthernetServerStaticIPMode1Eth2
            config_get  EthernetServerBroadcastMode1Eth2    "$NetworkInterfaceConfigureEventSection"  EthernetServerBroadcastMode1Eth2
            config_get  EthernetServerNetmaskMode1Eth2  "$NetworkInterfaceConfigureEventSection"  EthernetServerNetmaskMode1Eth2
            {
                echo "EthernetModeEth2=\"server\""
                echo "EthernetEth2=\"eth2\""
                echo "ProtocolEth2=\"$EthernetProtocolMode1Eth2\""
                echo "StaticIPEth2=$EthernetServerStaticIPMode1Eth2"
                echo "BroadcastEth2=$EthernetServerBroadcastMode1Eth2"
                echo "NetmaskEth2=\"$EthernetServerNetmaskMode1Eth2\""
            } > "${EthernetEth2ConfigureCfgPath}.cfg"
        elif [  "$EthernetProtocolMode1Eth2"  =  "dhcp"  ]
        then
            config_get  EthernetServerDHCPIPMode1Eth2         "$NetworkInterfaceConfigureEventSection"  EthernetServerDHCPIPMode1Eth2
            config_get  EthernetServerDHCPBroadcastMode1Eth2  "$NetworkInterfaceConfigureEventSection"  EthernetServerDHCPBroadcastMode1Eth2
            {
                echo "EthernetModeEth2=\"server\""
                echo "EthernetEth2=\"eth2\""
                echo "ProtocolEth2=\"$EthernetProtocolMode1Eth2\""
                echo "DHCPIPEth2=$EthernetServerDHCPIPMode1Eth2"
                echo "DHCPBroadcastEth2=$EthernetServerDHCPBroadcastMode1Eth2"
            } > "${EthernetEth2ConfigureCfgPath}.cfg"
            
        fi
        
        sed -i '/gateway/d' "$Interface"
        config_get  BridgeEthernetEth0Mode1   "$NetworkInterfaceConfigureEventSection"  BridgeEthernetEth0Mode1
        config_get  BridgeEthernetEth1Mode1   "$NetworkInterfaceConfigureEventSection"  BridgeEthernetEth1Mode1
        config_get  BridgeEthernetEth2Mode1   "$NetworkInterfaceConfigureEventSection"  BridgeEthernetEth2Mode1
        config_get  BridgeEthernetStaticIP    "$NetworkInterfaceConfigureEventSection"  BridgeEthernetStaticIP
        config_get  BridgeEthernetNetmask     "$NetworkInterfaceConfigureEventSection"  BridgeEthernetNetmask

                ReplaceInterfacesEth0ConfigFile="#source /etc/network/eth0.cfg"
                ReplaceInterfacesEth1ConfigFile="#source /etc/network/eth1.cfg"
                ReplaceInterfacesEth2ConfigFile="#source /etc/network/eth2.cfg"

                  {
                    echo "ProtocolbrEth0=\"$BridgeEthernetEth0Mode1\""
                    echo "ProtocolbrEth1=\"$BridgeEthernetEth1Mode1\""
                    echo "ProtocolbrEth2=\"$BridgeEthernetEth2Mode1\""
                    echo "StaticIP=$BridgeEthernetStaticIP"
                    echo "Netmask=$BridgeEthernetNetmask"	
	          } > "${BridgeConfigureCfgPath}.cfg"
	            
    fi
    
   # when Ethernet to be configured as static or Dhcp client
    if [ "$ModeSettings" = "2" ] 
    then
  #***************************************Ethernet0 eth0 Configuration in Mode 2********************************************************
        config_get  EthernetProtocolMode2Eth0  "$NetworkInterfaceConfigureEventSection"  EthernetProtocolMode2Eth0
        config_get  StaticIP           "$NetworkInterfaceConfigureEventSection"  EthernetClientStaticIPMode2Eth0
        config_get  Netmask            "$NetworkInterfaceConfigureEventSection"  EthernetClientStaticNetmaskMode2Eth0
        config_get  gateway            "$NetworkInterfaceConfigureEventSection"  Gateway2
        if [ "$EthernetProtocolMode2Eth0"  =  "static" ]
        then  
        {
            echo "EthernetMode=\"clientstatic\""    
        } > "${EthernetEth0ConfigureCfgPath}.cfg"
                  
            ReplaceifaceEth0="iface eth0 inet static"
            ResultifaceEth0=$(grep -w  "iface eth0 inet dhcp" ${InterfaceEth0})
            if [ $? -eq 0 ]
            then
                sed -i "s/${ResultifaceEth0}/${ReplaceifaceEth0}/" "$InterfaceEth0"
                ResultIPaddress=$(grep -w "address"  ${InterfaceEth0})
                if [ $? -eq 1 ]                                            
                then       
                    Resultnetmask=$(grep -w "netmask"  ${InterfaceEth0})
                    if [ $? -eq 1 ]                                            
                    then
                        sed -i '/^iface eth0 inet static$/ s:$:\naddress\nnetmask:'  "$InterfaceEth0"     
                    fi
                fi                                                     
            fi                                             
                    
            #Updating the value of address in /etc/network/$InterfaceEth0
            ReplaceIPaddress="address  $StaticIP"
            ResultIPaddress=$(grep -w "address"  ${InterfaceEth0})
            if [ $? -eq 0 ]
            then
                sed -i "s/${ResultIPaddress}/${ReplaceIPaddress}/" "$InterfaceEth0"
            fi
    
            #Updating the value of netmask in /etc/network/$InterfaceEth0
            ReplaceNetmask="netmask  $Netmask"
            ResultNetmask=$(grep -w  "netmask"  ${InterfaceEth0})
            if [ $? -eq 0 ]
            then
                sed  -i "s/${ResultNetmask}/${ReplaceNetmask}/" "$InterfaceEth0"
            fi  
            
            config_get  Gateway2                      "$NetworkInterfaceConfigureEventSection"  Gateway2
            config_get  Gateway3                      "$NetworkInterfaceConfigureEventSection"  Gateway3
            config_get  EthernetClientStaticGatewayMode2Eth0  "$NetworkInterfaceConfigureEventSection"  EthernetClientStaticGatewayMode2Eth0
            if [ "$Gateway2"  =  "eth0" ] 
            then
                ResultGateway=$(grep -w  "gateway"  ${InterfaceEth0})
                if [ $? -eq 1 ]
                then
                    sed -i '/netmask/i\gateway' "$InterfaceEth0" 
                fi
                ReplaceGateway="gateway  $EthernetClientStaticGatewayMode2Eth0"
                ResultGateway=$(grep -w  "gateway"  ${InterfaceEth0})
                if [ $? -eq 0 ]
                then
                    sed  -i "s/${ResultGateway}/${ReplaceGateway}/" "$InterfaceEth0"
                fi
                #uci set modem.rmnet_data0.dataenable='0' 2>&1
                #uci set modem.rmnet_data0.monitorenable='0' 2>&1
                #uci commit
                #ubus call interfacemanager update '{}' 2>&1
            elif [ "$Gateway2"  !=  "eth0" ] 
            then    
                sed -i '/gateway/d' "$InterfaceEth0"
            fi
        elif [ "$EthernetProtocolMode2Eth0"  =  "dhcp" ]
        then
        {
            echo "EthernetMode=\"client\""  
        } > "${EthernetEth0ConfigureCfgPath}.cfg"

            config_get  Gateway2                      "$NetworkInterfaceConfigureEventSection"  Gateway2
            config_get  Gateway3                      "$NetworkInterfaceConfigureEventSection"  Gateway3
            config_get  EthernetClientDHCPGatewayMode2Eth0  "$NetworkInterfaceConfigureEventSection"  EthernetClientDHCPGatewayMode2Eth0
            if [ "$Gateway2"  =  "eth0" ] 
            then
                ResultGateway=$(grep -w  "gateway"  ${InterfaceEth0})
                if [ $? -eq 1 ]
                then
                    sed -i '/netmask/i\gateway' "$Interface" 
                fi
                ReplaceGateway="gateway  $EthernetClientDHCPGatewayMode2Eth0"
                ResultGateway=$(grep -w  "gateway"  ${InterfaceEth0})
                if [ $? -eq 0 ]
                then
                    sed  -i "s/${ResultGateway}/${ReplaceGateway}/" "$InterfaceEth0"
                fi
                #uci set modem.rmnet_data0.dataenable='0' 2>&1
                #uci set modem.rmnet_data0.monitorenable='0' 2>&1
                #uci commit
                #ubus call interfacemanager update '{}' 2>&1
            fi 
            ReplaceifaceEth0="iface eth0 inet dhcp"
            ResultifaceEth0=$(grep -w  "iface eth0 inet"  ${InterfaceEth0})    
            if [ $? -eq 0 ]
            then
                sed  -i "s/${ResultifaceEth0}/${ReplaceifaceEth0}/" "$InterfaceEth0"
            fi
            
            Resultaddress=$(grep -w "#address" ${InterfaceEth0})                   
            if [ $? -eq 0 ]                                                     
            then                                                                        
                echo $Resultaddress                                                 
            else                                                                                                                                        
                sed -i  "s/address/#address/"  "$InterfaceEth0"
                sed -i  "s/netmask/#netmask/"  "$InterfaceEth0"
                sed -i  '/gateway/d' "$Interface"
            fi  
        fi   
   

        #*****************************************Ethernet1 eth1 configuration in Mode2********************************************#
        config_get  EthernetProtocolMode2Eth1  "$NetworkInterfaceConfigureEventSection"  EthernetProtocolMode2Eth1
        if [  "$EthernetProtocolMode2Eth1"  =  "static"  ]
        then
            config_get  EthernetServerStaticIPMode2Eth1   "$NetworkInterfaceConfigureEventSection"  EthernetServerStaticIPMode2Eth1
            config_get  EthernetServerNetmaskMode2Eth1    "$NetworkInterfaceConfigureEventSection"  EthernetServerNetmaskMode2Eth1
            config_get  EthernetServerBroadcastMode2Eth1  "$NetworkInterfaceConfigureEventSection"  EthernetServerBroadcastMode2Eth1
            {
                echo "EthernetModeEth1=\"server\""
                echo "EthernetEth1=\"eth1\""
                echo "ProtocolEth1=\"$EthernetProtocolMode2Eth1\""
                echo "StaticIPEth1=$EthernetServerStaticIPMode2Eth1"
                echo "BroadcastEth1=$EthernetServerBroadcastMode2Eth1"
                echo "NetmaskEth1=\"$EthernetServerNetmaskMode2Eth1\""
            } > "${EthernetEth1ConfigureCfgPath}.cfg"
        elif [  "$EthernetProtocolMode2Eth1"  =  "dhcp"  ]
        then
            config_get  EthernetServerDHCPIPMode2Eth1         "$NetworkInterfaceConfigureEventSection"  EthernetServerDHCPIPMode2Eth1
            config_get  EthernetServerDHCPBroadcastMode2Eth1  "$NetworkInterfaceConfigureEventSection"  EthernetServerDHCPBroadcastMode2Eth1
            {
                echo "EthernetModeEth1=\"server\""
                echo "EthernetEth1=\"eth1\""
                echo "ProtocolEth1=\"$EthernetProtocolMode2Eth1\""
                echo "DHCPIPEth1=$EthernetServerDHCPIPMode2Eth1"
                echo "DHCPBroadcastEth1=$EthernetServerDHCPBroadcastMode2Eth1"
            } > "${EthernetEth1ConfigureCfgPath}.cfg"
            
        fi
        #***************************************Ethernet2 eth2 configuration in Mode2************************************************#
         config_get  EthernetProtocolMode2Eth2  "$NetworkInterfaceConfigureEventSection"  EthernetProtocolMode2Eth2
        if [  "$EthernetProtocolMode2Eth2"  =  "static"  ]
        then
            config_get  EthernetServerStaticIPMode2Eth2   "$NetworkInterfaceConfigureEventSection"  EthernetServerStaticIPMode2Eth2
            config_get  EthernetServerNetmaskMode2Eth2    "$NetworkInterfaceConfigureEventSection"  EthernetServerNetmaskMode2Eth2
            config_get  EthernetServerBroadcastMode2Eth2  "$NetworkInterfaceConfigureEventSection"  EthernetServerBroadcastMode2Eth2
            {
                echo "EthernetModeEth2=\"server\""
                echo "EthernetEth2=\"eth2\""
                echo "ProtocolEth2=\"$EthernetProtocolMode2Eth2\""
                echo "StaticIPEth2=$EthernetServerStaticIPMode2Eth2"
                echo "BroadcastEth2=$EthernetServerBroadcastMode2Eth2"
                echo "NetmaskEth2=\"$EthernetServerNetmaskMode2Eth2\""
            } > "${EthernetEth2ConfigureCfgPath}.cfg"
        elif [  "$EthernetProtocolMode2Eth2"  =  "dhcp"  ]
        then
            config_get  EthernetServerDHCPIPMode2Eth2         "$NetworkInterfaceConfigureEventSection"  EthernetServerDHCPIPMode2Eth2
            config_get  EthernetServerDHCPBroadcastMode2Eth2  "$NetworkInterfaceConfigureEventSection"  EthernetServerDHCPBroadcastMode2Eth2
            {
                echo "EthernetModeEth2=\"server\""
                echo "EthernetEth2=\"eth2\""
                echo "ProtocolEth2=\"$EthernetProtocolMode2Eth2\""
                echo "DHCPIPEth2=$EthernetServerDHCPIPMode2Eth2"
                echo "DHCPBroadcastEth2=$EthernetServerDHCPBroadcastMode2Eth2"
            } > "${EthernetEth2ConfigureCfgPath}.cfg"
            
        fi  
    fi             
}

CronReadListValues()
{
    TmpVal=""
    local value="$1"
    local VarName="$2"
    TmpVal="$(eval echo '$'ListVal"$VarName")"
    eval ListVal"$VarName"="${TmpVal}${value},"
}

UpgradeAutoUpgrade()
{
    echo "Updating UpgradeManager cron configuration"
    echo "Updating '/etc/cron.d/interfacemanager' configurations"
    config_load "$UpgradeManagerGenericFile" 
    config_list_foreach "$UpgradeManagerGenericSection" Hours CronReadListValues Hours
    config_list_foreach "$UpgradeManagerGenericSection" Minutes CronReadListValues Minutes
    config_list_foreach "$UpgradeManagerGenericSection" DayOfWeek CronReadListValues DayOfWeek
    config_list_foreach "$UpgradeManagerGenericSection" DayOfMonth CronReadListValues DayOfMonth
    config_list_foreach "$UpgradeManagerGenericSection" Month CronReadListValues Month
    
    ListValHours=$(echo "$ListValHours" | sed s'/,$//')
    ListValMinutes=$(echo "$ListValMinutes" | sed s'/,$//')
    ListValDayOfWeek=$(echo "$ListValDayOfWeek" | sed s'/,$//')
    ListValDayOfMonth=$(echo "$ListValDayOfMonth" | sed s'/,$//')
    ListValMonth=$(echo "$ListValMonth" | sed s'/,$//')

    # add entry to cron file
    sed -i '/AutoUpgradeApp/d' /etc/crontab
    echo "$ListValMinutes $ListValHours $ListValDayOfMonth $ListValMonth $ListValDayOfWeek  root /reap/bin/AutoUpgradeApp" >> /etc/crontab

    /etc/init.d/crond restart
    sleep 2
}


CronReadListValuesMaintenanceReboot()
{
	 TmpVal=""
    local value="$1"
    local VarName="$2"
    TmpVal="$(eval echo '$'ListValue"$VarName")"
    eval ListValue"$VarName"="${TmpVal}${value},"
	
}

UpgradeMaintenanceReboot()
{
    echo "Updating Maintenance Reboot  cron configuration"
    echo "Updating '/etc/cron.d/interfacemanager' configurations"
    config_load "$UpgradeManagerMaintenaceRebootGenericFile" 
    config_get  enable  "$UpgradeManagerMaintenaceRebootGenericSection" enable
    if [ "$enable" =  "1" ]
    then
        config_list_foreach "$UpgradeManagerMaintenaceRebootGenericSection" Hours CronReadListValuesMaintenanceReboot Hours
	    config_list_foreach "$UpgradeManagerMaintenaceRebootGenericSection" Minutes CronReadListValuesMaintenanceReboot Minutes
	    config_list_foreach "$UpgradeManagerMaintenaceRebootGenericSection" DayOfWeek CronReadListValuesMaintenanceReboot DayOfWeek
	    config_list_foreach "$UpgradeManagerMaintenaceRebootGenericSection" DayOfMonth CronReadListValuesMaintenanceReboot DayOfMonth
	    config_list_foreach "$UpgradeManagerMaintenaceRebootGenericSection" Month CronReadListValuesMaintenanceReboot Month
	    config_get  SelectReboot  "$UpgradeManagerMaintenaceRebootGenericSection" SelectReboot
	    
	    if [ "$SelectReboot" =  "reboot" ]
	    then
	        config_get  RebootType  "$UpgradeManagerMaintenaceRebootGenericSection" RebootType
	    elif [ "$SelectReboot" =  "none" ]
	    then 
	        RebootType=""
	    fi
    
	    if [ "$RebootType" = "hardware" ]
	    then 
	        RebootType="Hardware"
	    elif [  "$RebootType" = "system" ]
	    then 
	        RebootType="Software"
	    fi
    
	    ListValHours=$(echo "$ListValueHours" | sed s'/,$//')
	    ListValMinutes=$(echo "$ListValueMinutes" | sed s'/,$//')
	    ListValDayOfWeek=$(echo "$ListValueDayOfWeek" | sed s'/,$//')
	    ListValDayOfMonth=$(echo "$ListValueDayOfMonth" | sed s'/,$//')
	    ListValMonth=$(echo "$ListValueMonth" | sed s'/,$//')
	    
    elif [ "$enable" = "0" ]
    then 
	    ListValHours=" "
	    ListValMinutes=" "
	    ListValDayOfWeek=" "
	    ListValDayOfMonth=" "
	    ListValMonth=" "
	    a1RebootType=" "
    fi
    
    # add entry to cron file
    sed -i '/Board_Recycle_12V_Script.sh/d' /etc/crontabs/root
    echo "$ListValMinutes $ListValHours $ListValDayOfMonth $ListValMonth $ListValDayOfWeek sleep 70 && touch /etc/banner && /bin/UpdateMaintenancerebootlogs.sh  && /root/usrRPC/script/Board_Recycle_12V_Script.sh" >> /etc/crontabs/root
    
    /etc/init.d/cron restart
    sleep 2
}


UpdateEnableGateway()
{
  "${InitEthernet}" start	
  "${IPTablesMode}" start
  "${EnableDefaultGateway}" start  
   
}

UpdateInterfaceCfg()
{
    echo "Updating application configurations..."
    UpdateInterfaces
    UpdateEnableGateway  
}

UpdateMaintenanceReboot()
{
    UpgradeMaintenanceReboot
}

UpdateAutoUpgrade()
{
   UpgradeAutoUpgrade
}

if [ $# -ne 1 ]
then
    echo "${0##*/}: missing action"
    usage
else
    action="$1"
    case "$action" in
            "ucitoappcfg")
                UpdateInterfaceCfg
                ;;
             "updatemaintenancereboot")
                UpdateMaintenanceReboot
                ;;
             "updateautoupgrade")
                UpdateAutoUpgrade
                ;; 
            *)
                usage
                ;;
    esac
fi

exit 0
