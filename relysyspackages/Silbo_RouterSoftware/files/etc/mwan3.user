#!/bin/sh
#
# This file is interpreted as shell script.
# Put your custom mwan3 action here, they will
# be executed with each netifd hotplug interface event
# on interfaces for which mwan3 is enabled.
#
# There are three main environment variables that are passed to this script.
#
# $ACTION
#      <ifup>         Is called by netifd and mwan3track
#      <ifdown>       Is called by netifd and mwan3track
#      <connected>    Is only called by mwan3track if tracking was successful
#      <disconnected> Is only called by mwan3track if tracking has failed
# $INTERFACE	Name of the interface which went up or down (e.g. "wan" or "wwan")
# $DEVICE	Physical device name which interface went up or down (e.g. "eth0" or "wwan0")

. /lib/functions.sh

SystemConfigFile="/etc/config/sysconfig"
PptpdUCIPath="/etc/config/pptp_i_config"
L2tpdUCIPath=/etc/config/L2TP
touch /tmp/networkstatus
chmod 0777 /tmp/networkstatus
killall pppd
mwan3log="/root/ConfigFiles/WanStatusLog/WanStatusLog.txt"
LogrotateConfigFile="/etc/logrotate.d/Mwan3Logrotate"

pptp_status=$(uci get vpnconfig1.general.enablepptpgeneral)

ReadSystemConfigFile()
{
   	config_load "$SystemConfigFile"
   	config_get PrimarySimSwitchBackEnable sysconfig primarysimswitchbackenable
   	config_get PrimarySimSwitchBackTime sysconfig primarysimswitchbacktime
	config_get EnableCellular sysconfig enablecellular
	config_get Port4Mode sysconfig port4mode
	config_get EthernetProtocolPort4wan1 sysconfig EthernetProtocolPort4wan
	config_get EthernetClientDHCPGatewayPort4wan1 sysconfig EthernetClientDHCPGatewayPort4wan
	config_get EthernetClientStaticGatewayPort4wan1 sysconfig EthernetClientStaticGatewayPort4wan
	config_get Port5Mode sysconfig port5mode
	config_get portmode sysconfig portmode
	config_get EthernetClientDHCPGatewayPort5wan2 sysconfig EthernetClientDHCPGatewayPort5wan
	config_get EthernetClientStaticGatewayPort5wan2 sysconfig EthernetClientStaticGatewayPort5wan
	config_get EthernetProtocolPort5wan2 sysconfig EthernetProtocolPort5wan
	config_get Wifi1Mode wificonfig wifi1mode
	config_get CellularOperationModelocal sysconfig CellularOperationMode
    config_get PortType1 sysconfig porttype1
	config_get ComPort1 sysconfig comport1
	config_get SmsEnable1 sysconfig smsenable1
	config_get SmsEnable2 sysconfig smsenable2
	config_get EthernetClientPptpServerAddress sysconfig EthernetClientPptpServerAddress
	config_get EthernetProtocolPort5wan2 sysconfig EthernetProtocolPort5wan
	config_get EthernetProtocolPortwan sysconfig EthernetProtocolPortwan
	config_get EthernetClientStaticGatewayPortwan sysconfig EthernetClientStaticGatewayPortwan
	config_get EthernetClientDHCPGatewayPortwan sysconfig EthernetClientDHCPGatewayPortwan
}

ReadSystemGpioFile()                               
{                                                    
        config_load "$SystemGpioConfig"              
        config_get BoardPowerGpio gpio boardpowergpio
        config_get BoardOnValue gpio boardonvalue
        config_get BoardOffValue gpio boardoffvalue
        config_get NoOfModem gpio noofmodem
        config_get Modem1PowerGpio gpio modem1powergpio
        config_get Modem1PowerOnValue gpio modem1poweronvalue
        config_get Modem1PowerOffValue gpio modem1poweroffvalue
        config_get Modem2PowerGpio gpio modem2powergpio
        config_get Modem2PowerOnValue gpio modem2poweronvalue
        config_get Modem2PowerOffValue gpio modem2poweroffvalue
        config_get ExternelUsb gpio externelusb
        config_get ExternelUsbGpio gpio externelusbgpio
        config_get ExternelUsbOnValue gpio externelusbonvalue
        config_get ExternelUsbOffValue gpio externelusboffvalue
        config_get SimSelectGpio gpio simselectgpio
        config_get Sim1SelectValue gpio sim1selectvalue
        config_get Sim2SelectValue gpio sim2selectvalue
        config_get NoOfProgramLed gpio noofprogramled
        config_get ProgramLed1Number gpio programled1number
        config_get ProgramLed1OnValue gpio programled1onvalue
        config_get ProgramLed1OffValue gpio programled1offvalue
        config_get ProgramLed2Number gpio programled2number
        config_get ProgramLed2OnValue gpio programled2onvalue
        config_get ProgramLed2OffValue gpio programled2offvalue
        config_get ProgramLed3Number gpio programled3number
        config_get ProgramLed3OnValue gpio programled3onvalue
        config_get ProgramLed3OffValue gpio programled3offvalue
        config_get SystemResetSwitch gpio systemresetswitch
}


DISABLE_PPTP()
{
	
 enable_pptp=$(uci get vpnconfig1.general.enablepptpgeneral)
    
    if [ "$enable_pptp" = "0"  ]
	then
		count=$(cat /etc/pptpserverip.txt wc -l)
		Serverip=$(cat /etc/pptpserverip.txt | head -$i | tail -1 | cut -d "," -f 1)
		
		for i in $(seq 1 ${count})
		do
			Serverip=$(cat /etc/pptpserverip.txt | head -$i | tail -1 | cut -d "," -f 1)
			gtway=$(cat /etc/pptpserverip.txt | head -$i | tail -1 | cut -d "," -f 2)
			ifname=$(cat /etc/pptpserverip.txt | head -$i | tail -1 | cut -d "," -f 3)
			Metric=$(cat /etc/pptpserverip.txt | head -$i | tail -1 | cut -d "," -f 4)
		
		ip route del "${Serverip}" via "${gtway}" dev "${ifname}" metric "${Metric}" > /dev/null 2>&1
		
		gateway=$(route -n | grep 'usb0' | grep "$Serverip" | awk '{print $2}')
		metric1=$(route -n | grep 'usb0' | grep "$Serverip" | awk '{print $5}')
		
		ip route del "${Serverip}" via "${gateway}" dev usb0 metric "${metric1}" > /dev/null 2>&1
		
		done
		
		if route -n | grep -q "$Serverip"; then
				echo "IP is present in the routing table."
			else
				rm /etc/pptpserverip.txt
			fi
		      
	fi	
	
	
}	

DISABLE_L2TP()
{
	
 enable_l2tp=$(uci get vpnconfig1.general.enableL2TPgeneral)
    
    if [ "$enable_l2tp" = "0"  ]
	then
		count=$(cat /etc/l2tpserverip.txt wc -l)
		Serverip=$(cat /etc/l2tpserverip.txt | head -$i | tail -1 | cut -d "," -f 1)
		
		for i in $(seq 1 ${count})
		do
			Serverip=$(cat /etc/l2tpserverip.txt | head -$i | tail -1 | cut -d "," -f 1)
			gtway=$(cat /etc/l2tpserverip.txt | head -$i | tail -1 | cut -d "," -f 2)
			ifname=$(cat /etc/l2tpserverip.txt | head -$i | tail -1 | cut -d "," -f 3)
			Metric=$(cat /etc/l2tpserverip.txt | head -$i | tail -1 | cut -d "," -f 4)
		
		ip route del "${Serverip}" via "${gtway}" dev "${ifname}" metric "${Metric}" > /dev/null 2>&1
		
		gateway=$(route -n | grep 'usb0' | grep "$Serverip" | awk '{print $2}')
		metric1=$(route -n | grep 'usb0' | grep "$Serverip" | awk '{print $5}')
		
		ip route del "${Serverip}" via "${gateway}" dev usb0 metric "${metric1}" > /dev/null 2>&1
		
		done
		
		if route -n | grep -q "$Serverip"; then
				echo "IP is present in the routing table."
			else
				rm /etc/l2tpserverip.txt
			fi
		      
	fi	
	
	
}	

 CHECK_PPTP()
{
		
	local pptpdConfigSection="$1"
    local interface="$2"
    killall pppd    
    ifname=$(uci get network.$interface.ifname)
    Metric=$(uci get mwan3config.$interface.wanpriority)
    
    if [ "${interface}" = "WIFI_WAN" ] || [ "${interface}" = "CWAN1_0" ] || [ "${interface}" = "wan6c1" ] || [ "${interface}" = "CWAN1_1" ] || [ "${interface}" = "wan6c2" ] || [ "${interface}" = "CWAN1" ] || [ "${interface}" = "CWAN2" ]
	then
		gtway=$(ifstatus $interface | grep -i "nexthop" | cut -d "\"" -f 4)
		if [ -z "$gtway" ]
		then
			for i in 1 2 3
			do
				gtway=$(ifstatus $interface | grep -i "nexthop" | cut -d "\"" -f 4)
				
				if [ -n "$gtway" ]
				then
					break
				else
					sleep 2
				fi
			done
		fi
    else
		gtway=$(uci get network.$interface.gateway)
		if [ -z "$gtway" ]
		then
			for i in 1 2 3
			do
				gtway=$(ifstatus $interface | grep -i "nexthop" | cut -d "\"" -f 4)
				
				if [ -n "$gtway" ]
				then
					break
				else
					sleep 2
				fi
			done
		fi
    fi
    config_get Name "$pptpdConfigSection" name
    config_get depends_interface "$pptpdConfigSection" interface
    config_get Defaultroute "$pptpdConfigSection" defaultroute
    config_get Serverip "$pptpdConfigSection" serverip
    config_get PPTP_Metric "$pptpdConfigSection" metric
    config_get Defaultroute "$pptpdConfigSection" defaultroute

    if [ "$depends_interface" = "any" ]
    then
        
		ip route add "${Serverip}" via "${gtway}" dev "${ifname}" metric "${Metric}" > /dev/null 2>&1
		echo "$Serverip,$gtway,$ifname,$Metric" >> /etc/pptpserverip.txt
				
		if [ "$Defaultroute" = "1" ]
		then
			pptp_gtway=$(ifstatus $Name | grep -i "nexthop" | cut -d "\"" -f 4)
			
			ip route add default via $pptp_gtway dev pptp-$Name metric $PPTP_Metric
		fi
    fi
    
    #restart for pptp.
	killall -9 /usr/sbin/pppd > /dev/null 2>&1
}


####################################################################

 CHECK_L2TP()
{
	local l2tpConfigSection="$1"
    local interface="$2"
    ifname=$(uci get network.$interface.ifname)
    Metric=$(uci get mwan3config.$interface.wanpriority)
     
    if [ "${interface}" = "WIFI_WAN" ] || [ "${interface}" = "CWAN1_0" ] || [ "${interface}" = "wan6c1" ] || [ "${interface}" = "CWAN1_1" ] || [ "${interface}" = "wan6c2" ] || [ "${interface}" = "CWAN1" ] || [ "${interface}" = "CWAN2" ]
	then
		gtway=$(ifstatus $interface | grep -i "nexthop" | cut -d "\"" -f 4)
		if [ -z "$gtway" ]
		then
			for i in 1 2 3
			do
				gtway=$(ifstatus $interface | grep -i "nexthop" | cut -d "\"" -f 4)
				
				if [ -n "$gtway" ]
				then
					break
				else
					sleep 2
				fi
			done
		fi
    else
		gtway=$(uci get network.$interface.gateway)
		if [ -z "$gtway" ]
		then
			for i in 1 2 3
			do
				gtway=$(ifstatus $interface | grep -i "nexthop" | cut -d "\"" -f 4)
				
				if [ -n "$gtway" ]
				then
					break
				else
					sleep 2
				fi
			done
		fi
    fi
    config_get Name "$l2tpConfigSection" name
    config_get depends_interface "$l2tpConfigSection" interface
    config_get Defaultroute "$l2tpConfigSection" defaultroute
    config_get Serverip "$l2tpConfigSection" serverip
    config_get L2TP_Metric "$l2tpConfigSection" metric
    config_get Defaultroute "$l2tpConfigSection" defaultroute
	    
    if [ "$depends_interface" = "any" ]
    then
			ip route add "${Serverip}" via "${gtway}" dev "${ifname}" metric "${Metric}" > /dev/null 2>&1
			echo "$Serverip,$gtway,$ifname,$Metric" >> /etc/l2tpserverip.txt
	
		if [ "$Defaultroute" = "1" ]
		then
			l2tp_gtway=$(ifstatus $Name | grep -i "nexthop" | cut -d "\"" -f 4)
			ip route add default via $l2tp_gtway dev l2tp-$Name metric $L2TP_Metric
		fi
    fi
    
        ip rule add from all lookup main priority 1
}


####################################################################


  Check_IPSEC()
{
	
	interface="$1"
	if [ "$IpsecEnable" = "1" ]
	then
		#if [ "$ConnectionEnable" = "1" ]
		#then     
			uci set ipsec.general=ipsec
			uci set ipsec.general.uniqueids="on"
			
			#Get the default ifname from routing table.
			interfac=$(route -n | awk NR==3 | awk '{print $8}')
            
			#Ethernet
			wanCount=$(cat /etc/waninterface.txt | wc -l)
			
			for j in $(seq 1 ${wanCount})
			do		   
				wan=$(cat /etc/waninterface.txt | head -${j} | tail -1)    
			
				#Get the ifname for every interface name
				match_ifname=$(uci get network.$wan.ifname)
				
				#To get the interface name of the default route ifname, match the ifname from waninterface.txt  
				#with the ifname from routing table .
				
				if [ "$match_ifname" = "$interfac" ]
				then
				    interface_name="$wan"	
					break
				fi                    
			done

			if [ -n "$interface_name" ]
			then
				uci set ipsec.general.interface="$interface_name"                                                                                     
				uci set firewall.ipsec_rule1.src="$interface_name"                                                                                     
				uci set firewall.ipsec_rule2.src="$interface_name"                                                                                     
				uci set firewall.ipsec_rule3.src="$interface_name" 
			fi
			
			#STA
			if [ "$interfac" = "apcli0" ]                                                                                               
			then                                                                                                                          
				uci set ipsec.general.interface="WIFI_WAN" 
				uci set firewall.ipsec_rule1.src="WIFI_WAN"                                                                                     
				uci set firewall.ipsec_rule2.src="WIFI_WAN"                                                                                     
				uci set firewall.ipsec_rule3.src="WIFI_WAN"    
			fi
	
	
			if [ "$interfac" = "3g-CWAN1" ]                                       
			then                                                 
				uci set ipsec.general.interface="CWAN1"   
				uci set firewall.ipsec_rule1.src="CWAN1"   
				uci set firewall.ipsec_rule2.src="CWAN1"   
				uci set firewall.ipsec_rule3.src="CWAN1"  
			fi      
		   
			if [ "$interfac" = "3g-CWAN2" ]                    
			then                                         
				uci set ipsec.general.interface="CWAN2"   
				uci set firewall.ipsec_rule1.src="CWAN2"   
				uci set firewall.ipsec_rule2.src="CWAN2"   
				uci set firewall.ipsec_rule3.src="CWAN2"   
			fi
		
			if [ "$interfac" = "3g-CWAN1_0" ]          
			then                                         
				uci set ipsec.general.interface="CWAN1_0" 
				uci set firewall.ipsec_rule1.src="CWAN1_0" 
				uci set firewall.ipsec_rule2.src="CWAN1_0" 
				uci set firewall.ipsec_rule3.src="CWAN1_0" 
			fi
		
			if [ "$interfac" = "3g-CWAN1_1" ]          
			then                                         
				uci set ipsec.general.interface="CWAN1_1" 
				uci set firewall.ipsec_rule1.src="CWAN1_1" 
				uci set firewall.ipsec_rule2.src="CWAN1_1" 
				uci set firewall.ipsec_rule3.src="CWAN1_1" 
			fi
	
			#Cellular
			if [ "$CellularOperationModelocal" = "dualcellularsinglesim" ]                                                          
			then
				if [ "$interfac" = "usb0" ] || [ "$interfac" = "wwan0" ]
				then
					uci set ipsec.general.interface="CWAN1"
					uci set firewall.ipsec_rule1.src="CWAN1"                                                                                     
					uci set firewall.ipsec_rule2.src="CWAN1"                                                                                     
					uci set firewall.ipsec_rule3.src="CWAN1"
				fi
				if [ "$interfac" = "usb1" ] || [ "$interfac" = "wwan1" ]
				then
					uci set ipsec.general.interface="CWAN2"
					uci set firewall.ipsec_rule1.src="CWAN2"                                                                                     
					uci set firewall.ipsec_rule2.src="CWAN2"                                                                                     
					uci set firewall.ipsec_rule3.src="CWAN2"
				fi
			elif [ "$CellularOperationModelocal" = "singlecellulardualsim" ]                                                          
			then
				if [ "$interfac" = "usb0" ] || [ "$interfac" = "wwan0" ] || [ "$interfac" = "usb1" ] || [ "$interfac" = "wwan1" ]
				then
					simnum=$(cat /tmp/simnumfile)                                                                                         
					if [ "$simnum" = "1" ]                                                                                                
					then 
						uci set ipsec.general.interface="CWAN1_0"
						uci set firewall.ipsec_rule1.src="CWAN1_0"                                                                                     
						uci set firewall.ipsec_rule2.src="CWAN1_0"                                                                                     
						uci set firewall.ipsec_rule3.src="CWAN1_0"
					else
						uci set ipsec.general.interface="CWAN1_1"
						uci set firewall.ipsec_rule1.src="CWAN1_1"                                                                                     
						uci set firewall.ipsec_rule2.src="CWAN1_1"                                                                                     
						uci set firewall.ipsec_rule3.src="CWAN1_1"
					fi
				fi
			else
				if [ "$interfac" = "usb0" ] || [ "$interfac" = "wwan0" ] || [ "$interfac" = "usb1" ] || [ "$interfac" = "wwan1" ]
				then
					uci set ipsec.general.interface="CWAN1"
					uci set firewall.ipsec_rule1.src="CWAN1"                                                                                     
					uci set firewall.ipsec_rule2.src="CWAN1"                                                                                     
					uci set firewall.ipsec_rule3.src="CWAN1"
				fi
			fi

		uci commit ipsec
		uci commit firewall
		
		sleep 1
		
		/etc/init.d/firewall reload
		/etc/init.d/ipsec stop
		
		/bin/sleep 1
		
		/etc/init.d/ipsec start
		
		/bin/sleep 4                                                                    
		
		/usr/sbin/ipsec restart
	#fi
   fi	
   
}





SystemGpioConfig="/etc/config/systemgpio"
ReadSystemGpioFile
ReadSystemConfigFile
Sim1DataFlagFile="/etc/sim1dataflag"
Sim2DataFlagFile="/etc/sim2dataflag"

#NMS_Enable=$(uci get nmsconfig.nmsconfig.nmsenable)
NMS_Enable=$(uci get remoteconfig.nms.nmsenable)

policy_type=$(uci get mwan3config.general.select)

IpsecEnable=$(uci get vpnconfig1.general.enableipsecgeneral) 
OpenvpnEnable=$(uci get vpnconfig1.general.enableopenvpngeneral)

if [ "$Wifi1Mode" = "apsta" ] || [ "$Wifi1Mode" = "sta" ]
then
  wifimetric=$(uci get mwan3config.WIFI_WAN.wanpriority)
fi

if [ "$EnableCellular" = "1" ]
then
   if [ "$CellularOperationModelocal" = "singlecellulardualsim" ]
   then
     cwan1metric=$(uci get mwan3config.CWAN1_0.wanpriority)
     cwan2metric=$(uci get mwan3config.CWAN1_1.wanpriority)
   fi
   if [ "$CellularOperationModelocal" = "singlecellularsinglesim" ]                                    
   then
     cwan1metric=$(uci get mwan3config.CWAN1.wanpriority)
   fi
fi

[ ! -d /tmp/InterfaceStatus ] && mkdir -p /tmp/InterfaceStatus


if ([ "${ACTION}" = "disconnected" ] && [ "${INTERFACE}" = "CWAN1_0" ]) || ([ "${ACTION}" = "disconnected" ] && [ "${INTERFACE}" = "wan6c1" ] && [ "${CellularOperationModelocal}" = "singlecellulardualsim" ]) ; then
   # Do something on an ifup event for the wan interface only
   if [ "$EnableCellular" = "1" ]
   then
     BordType=$(uci get boardconfig.board.moduletype)

	if [ "$BordType" = "2" ] || [ "$BordType" = "3" ] || [ "$BordType" = "6" ]
	then
	echo "$ProgramLed1OffValue" > /sys/class/gpio/gpio$ProgramLed1Number/value
	fi
   sim=`cat /tmp/simnumfile` 
   if [ "$sim" = "1" ]
   then
      if [ ! -f "$Sim2DataFlagFile" ]
	  then
	    touch "$Sim2DataFlagFile"
	    echo 0 > "$Sim2DataFlagFile"
	  fi
	  Sim2DataFlag=`cat "$Sim2DataFlagFile"`
	if [ "$Sim2DataFlag" = "0" ]
	then
      /root/InterfaceManager/script/SimSwitch.sh CWAN1 2
    else
      /root/InterfaceManager/script/SimSwitch.sh CWAN1 1
    fi
	  if [ ! -f "$Sim1DataFlagFile" ]
	  then
	  touch "$Sim1DataFlagFile"
	  echo 0 > "$Sim1DataFlagFile"
	  fi
	  Sim1DataFlag=`cat "$Sim1DataFlagFile"`
	if [ "$Sim1DataFlag" = "0" ]
	then
     if [ "$PrimarySimSwitchBackEnable" = "1" ]
     then
	    pid=$(pgrep -f "/root/InterfaceManager/script/PrimarySwitch.sh")
		kill -TERM "$pid" > /dev/null 2>&1
		sleep 1
	    kill -KILL "$pid" > /dev/null 2>&1
        /root/InterfaceManager/script/PrimarySwitch.sh "$PrimarySimSwitchBackTime" CWAN1 1 &         
     fi
    else
      	pid=$(pgrep -f "/root/InterfaceManager/script/PrimarySwitch.sh")
		kill -TERM "$pid" > /dev/null 2>&1
		sleep 1
	    kill -KILL "$pid" > /dev/null 2>&1
    fi
   fi
   /usr/sbin/mwan3 ifdown CWAN1_0
   fi

                gtway=$(ifstatus CWAN1_0 | grep -i "nexthop" | cut -d "\"" -f 4) 
				int=$(uci get modem.CWAN1_0.ifname)
				
				cwan1_0metric=$(uci get mwan3config.CWAN1_0.wanpriority)
				
				if [ "$policy_type" = "balanced" ]
				then
					
					/sbin/route del -net default gw "${gtway}" dev "$int" metric "1" > /dev/null 2>&1
					
				elif [ "$policy_type" = "failover" ]
				then
					
					/sbin/route del -net default gw "${gtway}" dev "$int" metric "${cwan1_0metric}" > /dev/null 2>&1
				fi

   [ ! -f /tmp/InterfaceStatus/CWAN1_0Status ] && touch /tmp/InterfaceStatus/CWAN1_0Status                                  
   echo "`date` Interface CWAN1_0 DOWN" >> /tmp/InterfaceStatus/CWAN1_0Status
   echo "`date` Interface CWAN1_0 DOWN" >> "$mwan3log"
   echo "0" > /tmp/networkstatus   
   
   #restart for pptp.
   killall -9 /usr/sbin/pppd > /dev/null 2>&1
   
   Check_IPSEC $INTERFACE
	
   if [ "$OpenvpnEnable" = "1" ] ; then                             
      /etc/init.d/openvpn restart                                      
   fi    
   if [ "${NMS_Enable}" = "1" ]
   then
	/etc/init.d/openvpn restart
   fi  
	
fi

if ([ "${ACTION}" = "ifup" ] && [ "${INTERFACE}" = "CWAN1_0" ]) || ([ "${ACTION}" = "ifup" ] && [ "${INTERFACE}" = "wan6c1" ] && [ "${CellularOperationModelocal}" = "singlecellulardualsim" ]) ; then            
   # Do something on an ifup event for the wan interface only   
  
    #gtway=$(ifstatus CWAN1_0 | grep -i "nexthop" | cut -d "\"" -f 4) 
          
            echo "$INTERFACE"
             
            Check_IPSEC $INTERFACE
  
			gtway=$(ifstatus CWAN1_0 | grep -i "nexthop" | cut -d "\"" -f 4) 
			int=$(uci get modem.CWAN1_0.ifname)
			
			cwan1_0metric=$(uci get mwan3config.CWAN1_0.wanpriority)
			
			if [ "$policy_type" = "balanced" ]
			then
				
				/sbin/route add -net default gw "${gtway}" dev "$int" metric "1" > /dev/null 2>&1
				
			elif [ "$policy_type" = "failover" ]
			then
				
				/sbin/route add -net default gw "${gtway}" dev "$int" metric "${cwan1_0metric}" > /dev/null 2>&1
			fi
  
        #Check for pptp,l2tp...
		#killall -9 /usr/sbin/pppd > /dev/null 2>&1
		
		if [ "$pptp_status" = "1" ]
		then
			config_foreach CHECK_PPTP service $INTERFACE
		else
			DISABLE_PPTP
		fi
		
   
        if [ "$l2tp_status" = "1" ]
		then
			config_foreach CHECK_L2TP servicel2tp $INTERFACE
		else
			DISABLE_L2TP	
		fi
   
	
   if [ "$OpenvpnEnable" = "1" ] ; then                             
      /etc/init.d/openvpn restart                                      
   fi    
   if [ "${NMS_Enable}" = "1" ]
   then
	/etc/init.d/openvpn restart
   fi  

 
   [ ! -f /tmp/InterfaceStatus/CWAN1_0Status ] && touch /tmp/InterfaceStatus/CWAN1_0Status                                  
   echo "`date` Interface CWAN1_0 UP" >> /tmp/InterfaceStatus/CWAN1_0Status 
   echo "`date` Interface CWAN1_0 UP" >> "$mwan3log"
   echo "1" > /tmp/networkstatus  
   
   BordType=$(uci get boardconfig.board.moduletype)

	if [ "$BordType" = "2" ] || [ "$BordType" = "3" ] || [ "$BordType" = "6" ]
	then
	atnetworkinfo1=$(gcom -d /dev/"${PortType1}""${ComPort1}" -s /etc/gcom/atnetworkinfo1.gcom | awk 'NR==2')
	atnetworklatchinfo=$(echo "$atnetworkinfo1" | cut -d ":" -f 2 | cut -d "," -f 4 | tr -d '\011\012\013\014\015\040')

	if [ $atnetworklatchinfo -eq 7 ] || [ $atnetworklatchinfo -eq 8 ]
	then
	echo "$ProgramLed1OnValue" > /sys/class/gpio/gpio$ProgramLed1Number/value
	else
	echo "$ProgramLed1OffValue" > /sys/class/gpio/gpio$ProgramLed1Number/value
	fi
	fi 
		                                  
fi        

if ([ "${ACTION}" = "disconnected" ] && [ "${INTERFACE}" = "CWAN1_1" ]) || ([ "${ACTION}" = "disconnected" ] && [ "${INTERFACE}" = "wan6c2" ]); then  
   # Do something on an ifup event for the wan interface only
   if [ "$EnableCellular" = "1" ]                                                            
   then
    BordType=$(uci get boardconfig.board.moduletype)

	if [ "$BordType" = "2" ] || [ "$BordType" = "3" ] || [ "$BordType" = "6" ]
	then
	echo "$ProgramLed1OffValue" > /sys/class/gpio/gpio$ProgramLed1Number/value
	fi
	
  if [ "$PrimarySimSwitchBackEnable" = "1" ]                                                
  then 
    pid=$(pgrep -f "/root/InterfaceManager/script/PrimarySwitch.sh")
	kill -TERM "$pid" > /dev/null 2>&1
	sleep 1
    kill -KILL "$pid" > /dev/null 2>&1
  fi
   sim=`cat /tmp/simnumfile`                                                
   if [ "$sim" = "2" ]                                              
   then       
      if [ ! -f "$Sim1DataFlagFile" ]
	  then
	  touch "$Sim1DataFlagFile"
	  echo 0 > "$Sim1DataFlagFile"
	  fi
	  Sim1DataFlag=`cat "$Sim1DataFlagFile"`
	if [ "$Sim1DataFlag" = "0" ]
	then                                                      
      /root/InterfaceManager/script/SimSwitch.sh CWAN1 1
     else
      /root/InterfaceManager/script/SimSwitch.sh CWAN1 2 
    fi     
   fi
   /usr/sbin/mwan3 ifdown CWAN1_1
   fi
    
   #restart for pptp.
   killall -9 /usr/sbin/pppd > /dev/null 2>&1    
    
   Check_IPSEC $INTERFACE	
	
   if [ "$OpenvpnEnable" = "1" ] ; then                             
      /etc/init.d/openvpn restart                                      
   fi    
   if [ "${NMS_Enable}" = "1" ]
   then
	/etc/init.d/openvpn restart
   fi  
				gtway=$(ifstatus CWAN1_1 | grep -i "nexthop" | cut -d "\"" -f 4) 
				int=$(uci get modem.CWAN1_1.ifname)
				
				cwan1_1metric=$(uci get mwan3config.CWAN1_1.wanpriority)
				
				if [ "$policy_type" = "balanced" ]
				then
					
					/sbin/route del -net default gw "${gtway}" dev "$int" metric "1" > /dev/null 2>&1
					
				elif [ "$policy_type" = "failover" ]
				then
					
					/sbin/route del -net default gw "${gtway}" dev "$int" metric "${cwan1_1metric}" > /dev/null 2>&1
				fi
	
    
    [ ! -f /tmp/InterfaceStatus/CWAN1_1Status ] && touch /tmp/InterfaceStatus/CWAN1_1Status                                  
  echo "`date` Interface CWAN1_1 DOWN" >> /tmp/InterfaceStatus/CWAN1_1Status
  echo "`date` Interface CWAN1_1 DOWN" >> "$mwan3log"
  echo "0" > /tmp/networkstatus 
  
 
  
fi   
    
 ###################################################################################  
    
   if ([ "${ACTION}" = "ifup" ] && [ "${INTERFACE}" = "CWAN1_1" ]) || ([ "${ACTION}" = "ifup" ] && [ "${INTERFACE}" = "wan6c2" ]); then            
   # Do something on an ifup event for the wan interface only 
   
   
  [ ! -f /tmp/InterfaceStatus/CWAN1_1Status ] && touch /tmp/InterfaceStatus/CWAN1_1Status                                        
  echo "`date` Interface CWAN1_1 UP" >> /tmp/InterfaceStatus/CWAN1_1Status
  echo "`date` Interface CWAN1_1 UP" >> "$mwan3log"
   echo "1" > /tmp/networkstatus 
     BordType=$(uci get boardconfig.board.moduletype)

	if [ "$BordType" = "2" ] || [ "$BordType" = "3" ] || [ "$BordType" = "6" ]
	then
	atnetworkinfo1=$(gcom -d /dev/"${PortType1}""${ComPort1}" -s /etc/gcom/atnetworkinfo1.gcom | awk 'NR==2')
	atnetworklatchinfo=$(echo "$atnetworkinfo1" | cut -d ":" -f 2 | cut -d "," -f 4 | tr -d '\011\012\013\014\015\040')
		if [ $atnetworklatchinfo -eq 7 ] || [ $atnetworklatchinfo -eq 8 ]
		then
			echo "$ProgramLed1OnValue" > /sys/class/gpio/gpio$ProgramLed1Number/value
		else
			echo "$ProgramLed1OffValue" > /sys/class/gpio/gpio$ProgramLed1Number/value
		fi
	fi  
	
	        gtway=$(ifstatus CWAN1_1 | grep -i "nexthop" | cut -d "\"" -f 4) 
			int=$(uci get modem.CWAN1_1.ifname)
			
			cwan1_1metric=$(uci get mwan3config.CWAN1_1.wanpriority)
			
			if [ "$policy_type" = "balanced" ]
			then
				
				/sbin/route add -net default gw "${gtway}" dev "$int" metric "1" > /dev/null 2>&1
				
			elif [ "$policy_type" = "failover" ]
			then
				
				/sbin/route add -net default gw "${gtway}" dev "$int" metric "${cwan1_1metric}" > /dev/null 2>&1
			fi
			
	
	 Check_IPSEC $INTERFACE
	
	    #Check for pptp,l2tp...
		#killall -9 /usr/sbin/pppd > /dev/null 2>&1
		
		if [ "$pptp_status" = "1" ]
		then
			config_foreach CHECK_PPTP service $INTERFACE
		else
			DISABLE_PPTP
		fi
	
		 if [ "$l2tp_status" = "1" ]
		then
			config_foreach CHECK_L2TP servicel2tp $INTERFACE
		else
			DISABLE_L2TP	
		fi
	
	
	if [ "$OpenvpnEnable" = "1" ] ; then                             
		/etc/init.d/openvpn restart                                      
    fi 
    if [ "${NMS_Enable}" = "1" ]
	then
		/etc/init.d/openvpn restart
	fi
		                             
fi         
    
  
 ###################################################################################

if ([ "${ACTION}" = "disconnected" ] && [ "${INTERFACE}" = "CWAN1" ]) || ([ "${ACTION}" = "disconnected" ] && [ "${INTERFACE}" = "wan6c1" ] && [ "${CellularOperationModelocal}" = "singlecellularsinglesim" ])  ; then 
     BordType=$(uci get boardconfig.board.moduletype)

	if [ "$BordType" = "2" ] || [ "$BordType" = "3" ] || [ "$BordType" = "6" ]
	then
	echo "$ProgramLed1OffValue" > /sys/class/gpio/gpio$ProgramLed1Number/value
	fi
  gtway=$(ifstatus CWAN1 | grep -i "nexthop" | cut -d "\"" -f 4)                                                               
 /sbin/route del -net default gw "${gtway}" dev 3g-CWAN1 metric "${cwan1metric}" > /dev/null 2>&1                                   
 /sbin/route del -net default gw "${gtway}" dev 3g-CWAN1 metric "${cwan1metric}0" > /dev/null 2>&1                                   
 sleep 2                                                                                                                         
 /sbin/route add -net default gw "${gtway}" dev 3g-CWAN1 metric "${cwan1metric}0" > /dev/null 2>&1
 	#ip route add "${EthernetClientPptpServerAddress}" via "${gtway}" dev usb0 proto static metric "${cwan1metric}"  > /dev/null 2>&1
	#echo "$EthernetClientPptpServerAddress,$gtway,usb0,$cwan1metric" >> /etc/pptpserverip.txt
   
   source /tmp/InterfaceManager/status/ports.txt
   for i in 1 2 3
   do
	simid=$(/bin/at-cmd "$ComPort"  AT+qccid | awk FNR==2 | cut -d ":" -f 2) >> /tmp/InterfaceStatus/CWAN1Status 
	if [ "${#simid}" -gt 10 ]
	then
	   status="READY"
	   echo "$date:sim qccid is $simid" >> "$Logfile"
	   /root/usrRPC/script/Recycle_WAN1_PWR_Script.sh
	   break
	else
	   status="NOTREADY"
	   ifconfig usb0 down
	   ifconfig usb0 up
	   echo "$date:sim qccid is not ready $simid" >> "$Logfile"
	fi
   done
   
   
		gtway=$(ifstatus CWAN1 | grep -i "nexthop" | cut -d "\"" -f 4) 
		int=$(uci get modem.CWAN1.ifname)
		cwan1metric=$(uci get mwan3config.CWAN1.wanpriority)
				
		if [ "$policy_type" = "balanced" ]
		then				
			/sbin/route del -net default gw "${gtway}" dev "$int" metric "1" > /dev/null 2>&1				
		elif [ "$policy_type" = "failover" ]
		then					
			/sbin/route del -net default gw "${gtway}" dev "$int" metric "${cwan1metric}" > /dev/null 2>&1
		fi
   
   #restart for pptp.
   killall -9 /usr/sbin/pppd > /dev/null 2>&1   
   
 Check_IPSEC $INTERFACE
	
   if [ "$OpenvpnEnable" = "1" ] ; then                             
      /etc/init.d/openvpn restart                                      
   fi    
   if [ "${NMS_Enable}" = "1" ]
   then
	/etc/init.d/openvpn restart
   fi  
   
  [ ! -f /tmp/InterfaceStatus/CWAN1Status ] && touch /tmp/InterfaceStatus/CWAN1Status                                        
  echo "`date` Interface CWAN1 DOWN" >> /tmp/InterfaceStatus/CWAN1Status 
  echo "`date` Interface CWAN1 DOWN" >> "$mwan3log" 
  echo "0" > /tmp/networkstatus
fi

if ([ "${ACTION}" = "ifup" ] && [ "${INTERFACE}" = "CWAN1" ]) || ([ "${ACTION}" = "ifup" ] && [ "${INTERFACE}" = "wan6c1" ] && [ "${CellularOperationModelocal}" = "singlecellularsinglesim" ]) ; then                      
   # Do something on an ifup event for the wan interface only
 gtway=$(ifstatus CWAN1 | grep -i "nexthop" | cut -d "\"" -f 4)                                                                 
 /sbin/route del -net default gw "${gtway}" dev 3g-CWAN1 metric "${cwan1metric}" > /dev/null 2>&1                                
 /sbin/route del -net default gw "${gtway}" dev 3g-CWAN1 metric "${cwan1metric}0" > /dev/null 2>&1                               
 sleep 2                                                                                                                         
 /sbin/route add -net default gw "${gtway}" dev 3g-CWAN1 metric "${cwan1metric}" > /dev/null 2>&1  
 	#ip route add "${EthernetClientPptpServerAddress}" via "${gtway}" dev usb0 proto static metric "${cwan1metric}"  > /dev/null 2>&1 
	#echo "$EthernetClientPptpServerAddress,$gtway,usb0,$cwan1metric" >> /etc/pptpserverip.txt

   Check_IPSEC $INTERFACE
	
   	    #Check for pptp,l2tp...
		#killall -9 /usr/sbin/pppd > /dev/null 2>&1
		
		if [ "$pptp_status" = "1" ]
		then
			config_foreach CHECK_PPTP service $INTERFACE
		else
			DISABLE_PPTP	
		fi	
		
		 if [ "$l2tp_status" = "1" ]
		then
			config_foreach CHECK_L2TP servicel2tp $INTERFACE
		else
			DISABLE_L2TP	
		fi
	
   if [ "$OpenvpnEnable" = "1" ] ; then                             
      /etc/init.d/openvpn restart                                      
   fi    
   if [ "${NMS_Enable}" = "1" ]
   then
	/etc/init.d/openvpn restart
   fi  
	
		gtway=$(ifstatus CWAN1 | grep -i "nexthop" | cut -d "\"" -f 4) 
		int=$(uci get modem.CWAN1.ifname)
		cwan1metric=$(uci get mwan3config.CWAN1.wanpriority)
	
		if [ "$policy_type" = "balanced" ]
		then				
			/sbin/route add -net default gw "${gtway}" dev "$int" metric "1" > /dev/null 2>&1				
		elif [ "$policy_type" = "failover" ]
		then					
			/sbin/route add -net default gw "${gtway}" dev "$int" metric "${cwan1metric}" > /dev/null 2>&1
		fi

      
  [ ! -f /tmp/InterfaceStatus/CWAN1Status ] && touch /tmp/InterfaceStatus/CWAN1Status                                        
  echo "`date` Interface CWAN1 UP" >> /tmp/InterfaceStatus/CWAN1Status 
  echo "`date` Interface CWAN1 UP" >> "$mwan3log" 
   echo "1" > /tmp/networkstatus 
   
   
     BordType=$(uci get boardconfig.board.moduletype)

	if [ "$BordType" = "2" ] || [ "$BordType" = "3" ] || [ "$BordType" = "6" ]
	then
	atnetworkinfo1=$(gcom -d /dev/"${PortType1}""${ComPort1}" -s /etc/gcom/atnetworkinfo1.gcom | awk 'NR==2')
	atnetworklatchinfo=$(echo "$atnetworkinfo1" | cut -d ":" -f 2 | cut -d "," -f 4 | tr -d '\011\012\013\014\015\040')

	if [ $atnetworklatchinfo -eq 7 ] || [ $atnetworklatchinfo -eq 8 ]
	then
	echo "$ProgramLed1OnValue" > /sys/class/gpio/gpio$ProgramLed1Number/value
	else
	echo "$ProgramLed1OffValue" > /sys/class/gpio/gpio$ProgramLed1Number/value
	fi

	fi 
	                                                     
fi 

if [ "${ACTION}" = "disconnected" ] && [ "${INTERFACE}" = "CWAN2" ] ; then
     BordType=$(uci get boardconfig.board.moduletype)

	if [ "$BordType" = "2" ] || [ "$BordType" = "3" ] || [ "$BordType" = "6" ]
	then
	echo "$ProgramLed1OffValue" > /sys/class/gpio/gpio$ProgramLed1Number/value
	fi
 gtway=$(ifstatus CWAN2 | grep -i "nexthop" | cut -d "\"" -f 4)                                                                 
 /sbin/route del -net default gw "${gtway}" dev 3g-CWAN2 metric "${cwan2metric}" > /dev/null 2>&1                                
 /sbin/route del -net default gw "${gtway}" dev 3g-CWAN2 metric "${cwan2metric}0" > /dev/null 2>&1                               
 sleep 2                                                                                                                         
 /sbin/route add -net default gw "${gtway}" dev 3g-CWAN2 metric "${cwan2metric}0" > /dev/null 2>&1 
 
		gtway=$(ifstatus CWAN2 | grep -i "nexthop" | cut -d "\"" -f 4) 
		int=$(uci get modem.CWAN2.ifname)
		cwan2metric=$(uci get mwan3config.CWAN2.wanpriority)
				
		if [ "$policy_type" = "balanced" ]
		then
			/sbin/route del -net default gw "${gtway}" dev "$int" metric "1" > /dev/null 2>&1		
		elif [ "$policy_type" = "failover" ]
		then				
			/sbin/route del -net default gw "${gtway}" dev "$int" metric "${cwan2metric}" > /dev/null 2>&1
		fi 
  
   #restart for pptp.
   killall -9 /usr/sbin/pppd > /dev/null 2>&1  
  
  Check_IPSEC $INTERFACE
	
   if [ "$OpenvpnEnable" = "1" ] ; then                             
      /etc/init.d/openvpn restart                                      
   fi    
   if [ "${NMS_Enable}" = "1" ]
   then
	/etc/init.d/openvpn restart
   fi  
	
  [ ! -f /tmp/InterfaceStatus/CWAN2Status ] && touch /tmp/InterfaceStatus/CWAN2Status                                        
  echo "`date` Interface CWAN2 DOWN" >> /tmp/InterfaceStatus/CWAN2Status 
  echo "`date` Interface CWAN2 DOWN" >> "$mwan3log"
  echo "0" > /tmp/networkstatus     
                                                
fi   

if [ "${ACTION}" = "ifup" ] && [ "${INTERFACE}" = "CWAN2" ] ; then                      
   # Do something on an ifup event for the wan interface only
  gtway=$(ifstatus CWAN1 | grep -i "nexthop" | cut -d "\"" -f 4)                                                                 
 /sbin/route del -net default gw "${gtway}" dev 3g-CWAN1 metric "${cwan1metric}" > /dev/null 2>&1                                
 /sbin/route del -net default gw "${gtway}" dev 3g-CWAN1 metric "${cwan1metric}0" > /dev/null 2>&1                               
 sleep 2                                                                                                                         
 /sbin/route add -net default gw "${gtway}" dev 3g-CWAN1 metric "${cwan1metric}" > /dev/null 2>&1  
  	
  
		gtway=$(ifstatus CWAN2 | grep -i "nexthop" | cut -d "\"" -f 4) 
		int=$(uci get modem.CWAN2.ifname)
		cwan2metric=$(uci get mwan3config.CWAN2.wanpriority)
				
		if [ "$policy_type" = "balanced" ]
		then
			/sbin/route add -net default gw "${gtway}" dev "$int" metric "1" > /dev/null 2>&1		
		elif [ "$policy_type" = "failover" ]
		then				
			/sbin/route add -net default gw "${gtway}" dev "$int" metric "${cwan2metric}" > /dev/null 2>&1
		fi 
  
  
    Check_IPSEC $INTERFACE
	
	    #Check for pptp,l2tp...
		#killall -9 /usr/sbin/pppd > /dev/null 2>&1
		
		if [ "$pptp_status" = "1" ]
		then
			config_foreach CHECK_PPTP service $INTERFACE
		else
			DISABLE_PPTP
		fi	
		
		 if [ "$l2tp_status" = "1" ]
		then
			config_foreach CHECK_L2TP servicel2tp $INTERFACE
		else
			DISABLE_L2TP	
		fi
	
   if [ "$OpenvpnEnable" = "1" ] ; then                             
      /etc/init.d/openvpn restart                                      
   fi    
   if [ "${NMS_Enable}" = "1" ]
   then
	/etc/init.d/openvpn restart
   fi  
    
  [ ! -f /tmp/InterfaceStatus/CWAN2Status ] && touch /tmp/InterfaceStatus/CWAN2Status                                            
  echo "`date` Interface CWAN2 UP" >> /tmp/InterfaceStatus/CWAN2Status 
  echo "`date` Interface CWAN2 UP" >> "$mwan3log" 
   echo "1" > /tmp/networkstatus 
     BordType=$(uci get boardconfig.board.moduletype)

	if [ "$BordType" = "2" ] || [ "$BordType" = "3" ] || [ "$BordType" = "6" ]
	then
	atnetworkinfo1=$(gcom -d /dev/"${PortType1}""${ComPort1}" -s /etc/gcom/atnetworkinfo1.gcom | awk 'NR==2')
	atnetworklatchinfo=$(echo "$atnetworkinfo1" | cut -d ":" -f 2 | cut -d "," -f 4 | tr -d '\011\012\013\014\015\040')
		if [ $atnetworklatchinfo -eq 7 ] || [ $atnetworklatchinfo -eq 8 ]
		then
			echo "$ProgramLed1OnValue" > /sys/class/gpio/gpio$ProgramLed1Number/value
		else
			echo "$ProgramLed1OffValue" > /sys/class/gpio/gpio$ProgramLed1Number/value
		fi
	fi 
	                                                    
fi 

if [ "${ACTION}" = "disconnected" ] && [ "${INTERFACE}" = "WIFI_WAN" ] ; then 
 gtway=$(ifstatus WIFI_WAN | grep -i "nexthop" | cut -d "\"" -f 4)
 
		if [ "$policy_type" = "balanced" ]
		then
			#Flush the ip address.
			ifconfig apcli0 down
			
			/sbin/route del -net default gw "${gtway}" dev apcli0 metric "1" > /dev/null 2>&1
			
			/bin/sleep 1  
			            
		elif [ "$policy_type" = "failover" ]
		then
			/sbin/route del -net default gw "${gtway}" dev apcli0 metric "${wifimetric}" > /dev/null 2>&1
			/sbin/route del -net default gw "${gtway}" dev apcli0 metric "${wifimetric}"0 > /dev/null 2>&1
			sleep 2
			/sbin/route add -net default gw "${gtway}" dev apcli0 metric "${wifimetric}"0 > /dev/null 2>&1                
		fi

   #restart for pptp.
   killall -9 /usr/sbin/pppd > /dev/null 2>&1

	Check_IPSEC $INTERFACE
	
   if [ "$OpenvpnEnable" = "1" ] ; then                             
      /etc/init.d/openvpn restart                                      
   fi    
   if [ "${NMS_Enable}" = "1" ]
   then
	/etc/init.d/openvpn restart
   fi  
	 
  [ ! -f /tmp/InterfaceStatus/WIFI_WANStatus ] && touch /tmp/InterfaceStatus/WIFI_WANStatus                                            
  echo "`date` Interface WIFI_WAN DOWN" >> /tmp/InterfaceStatus/WIFI_WANStatus                                                        
  echo "`date` Interface WIFI_WAN DOWN" >> "$mwan3log"
fi

if [ "${ACTION}" = "ifup" ] && [ "${INTERFACE}" = "WIFI_WAN" ] || [ "${ACTION}" = "connected" ] && [ "${INTERFACE}" = "WIFI_WAN" ]; then                      
   # Do something on an ifup event for the wan interface only
    gtway=$(ifstatus WIFI_WAN | grep -i "nexthop" | cut -d "\"" -f 4)                                                               
   /sbin/route del -net default gw "${gtway}" dev apcli0 metric "${wifimetric}"0 > /dev/null 2>&1
   /sbin/route del -net default gw "${gtway}" dev apcli0 metric "${wifimetric}" > /dev/null 2>&1                                 
   sleep 2                                                                                                                         
   /sbin/route add -net default gw "${gtway}" dev apcli0 metric "${wifimetric}" > /dev/null 2>&1                             
  
  	Check_IPSEC $INTERFACE
	
	    #Check for pptp,l2tp...
		#killall -9 /usr/sbin/pppd > /dev/null 2>&1
		
		if [ "$pptp_status" = "1" ]
		then
			config_foreach CHECK_PPTP service $INTERFACE
		else
			DISABLE_PPTP
		fi	
		
		if [ "$l2tp_status" = "1" ]
		then
			config_foreach CHECK_L2TP servicel2tp $INTERFACE
		else
			DISABLE_L2TP	
		fi
	
   if [ "$OpenvpnEnable" = "1" ] ; then                             
      /etc/init.d/openvpn restart                                      
   fi    
   if [ "${NMS_Enable}" = "1" ]
   then
	/etc/init.d/openvpn restart
   fi  
	
	   
  [ ! -f /tmp/InterfaceStatus/WIFI_WANStatus ] && touch /tmp/InterfaceStatus/WIFI_WANStatus                                              
  echo "`date` Interface WIFI_WAN UP" >> /tmp/InterfaceStatus/WIFI_WANStatus 
  echo "`date` Interface WIFI_WAN UP" >> "$mwan3log"
   echo "1" > /tmp/networkstatus                                                      
fi 


EthernetInterfaces()
{
	ACTION="$1"
	INTERFACE="$2"
	
	policy_type=$(uci get mwan3config.general.select)
	
	wanpriority=$(uci get mwan3config.$INTERFACE.wanpriority)
	
	ifname=$(uci get networkinterfaces.$INTERFACE.ifname)
	protocol=$(uci get networkinterfaces.$INTERFACE.protocol)
	staticgateway=$(uci get networkinterfaces.$INTERFACE.staticgateway)
	dhcpgateway=$(uci get networkinterfaces.$INTERFACE.dhcpgateway)
	pppoegateway=$(uci get networkinterfaces.$INTERFACE.pppoegateway)
	
	
	#Get the value after "." for adding 000 in routing table in static 
	metric_value=$(echo $ifname | awk -F'.' '{print $2}')
	#ifdown
	if [ "${ACTION}" = "ifdown" ]
	then
		echo "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM " Logfile1
		echo "$date:<mwan3.user> ${INTERFACE} ${ACTION}" Logfile1
		echo "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM " Logfile1
	
		gtway=$(ifstatus $INTERFACE | grep -i "nexthop" | cut -d "\"" -f 4)
		
		if [ "$policy_type" = "balanced" ]
		then
			
			if [[ "$protocol" = "static" ]]
			then
			
				/sbin/route del -net default gw "${staticgateway}" dev "${ifname}" metric "1" > /dev/null 2>&1
				
				/bin/sleep 1
				
				#${#wanpriority} returns the length of the string stored in the variable wanpriority
				if [ ${#wanpriority} -eq 1 ]; then
				#Added 1000 as metric so that it should detect mwan3 ifup event in static mode.
				/sbin/route add -net default gw "${staticgateway}" dev "${ifname}" metric "${metric_value}000" > /dev/null 2>&1
				else
				/sbin/route add -net default gw "${staticgateway}" dev "${ifname}" metric "${metric_value}00" > /dev/null 2>&1
				fi
				
			elif [[ "$protocol" = "dhcpclient" ]]
			then

				#Flush the ip address.
				ifconfig "${ifname}" down
			
				#if EthernetProtocolPort1wan=dhcpclient, manually add this because all the metrices are same (0) for balanced.
				
				/sbin/route del -net default gw "${dhcpgateway}" dev "${ifname}" metric "1" > /dev/null 2>&1
				/sbin/route del -net default gw "${gtway}" dev "${ifname}" metric "1" > /dev/null 2>&1
				
				#Delete the wanpriority if added if the fping fails in ifup.
				/sbin/route del -net default gw "${dhcpgateway}" dev "${ifname}" metric "${metric_value}000" > /dev/null 2>&1
				/sbin/route del -net default gw "${gtway}" dev "${ifname}" metric "{metric_value}000" > /dev/null 2>&1
				
				/sbin/route del -net default gw "${dhcpgateway}" dev "${ifname}" metric "${metric_value}00" > /dev/null 2>&1
				/sbin/route del -net default gw "${gtway}" dev "${ifname}" metric "{metric_value}00" > /dev/null 2>&1
				
				/bin/sleep 1                                                     
				
				#bring the interface back up.	
				#ifconfig "${ifname}" up
				
			elif [[ "$protocol" = "pppoe" ]]
			then

				#Flush the ip address.
				ifconfig "${ifname}" down
			
				#if EthernetProtocolPort1wan=dhcpclient, manually add this because all the metrices are same (0) for balanced.
				
				/sbin/route del -net default gw "${pppoegateway}" dev "${ifname}" metric "1" > /dev/null 2>&1
				/sbin/route del -net default gw "${gtway}" dev "${ifname}" metric "1" > /dev/null 2>&1
				
				/bin/sleep 1                                                     
				
				#bring the interface back up.	
				#ifconfig "${ifname}" up
		
			fi
			
		elif [ "$policy_type" = "failover" ]
		then
			if [ "$protocol" = "static" ]
			then
				/sbin/route del -net default gw "${staticgateway}" dev "${ifname}" metric "${wanpriority}" > /dev/null 2>&1
			
				/bin/sleep 1
				
				#${#wanpriority} returns the length of the string stored in the variable wanpriority
				if [ ${#wanpriority} -eq 1 ]; then
				#Added ${ewan1metric}000 as metric so that it should detect mwan3 ifup event in static mode.
				/sbin/route add -net default gw "${staticgateway}" dev "${ifname}" metric "${wanpriority}000" > /dev/null 2>&1
				else
				/sbin/route add -net default gw "${staticgateway}" dev "${ifname}" metric "${wanpriority}00" > /dev/null 2>&1
				fi
			
			elif [[ "$protocol" = "dhcpclient" ]]
			then
				#Flush the ip address.
				ifconfig "${ifname}" down
				
				/sbin/route del -net default gw "${dhcpgateway}" dev "${ifname}" metric "${wanpriority}" > /dev/null 2>&1
				/sbin/route del -net default gw "${gtway}" dev "${ifname}" metric "${wanpriority}" > /dev/null 2>&1
				
				#Delete the wanpriority if added if the fping fails in ifup.
				/sbin/route del -net default gw "${dhcpgateway}" dev "${ifname}" metric "${wanpriority}000" > /dev/null 2>&1
				/sbin/route del -net default gw "${gtway}" dev "${ifname}" metric "${wanpriority}000" > /dev/null 2>&1
				
				/sbin/route del -net default gw "${dhcpgateway}" dev "${ifname}" metric "${wanpriority}00" > /dev/null 2>&1
				/sbin/route del -net default gw "${gtway}" dev "${ifname}" metric "${wanpriority}00" > /dev/null 2>&1
				
				/bin/sleep 1   
				
				new_wanpriority=${wanpriority}000
				
				echo "$date:<mwan3.user> setting priority=$new_wanpriority in network config." >> $Logfile1
				echo "$date:<mwan3.user> network.$INTERFACE.metric=$new_wanpriority." >> $Logfile1
				uci set network.$INTERFACE.metric=$new_wanpriority
				uci commit network
				
				ubus call network reload
			
				#bring the interface back up.	
				#ifconfig "${ifname}" up
				
			elif [[ "$protocol" = "pppoe" ]]
			then
				#Flush the ip address.
				ifconfig "${ifname}" down
				
				/sbin/route del -net default gw "${pppoegateway}" dev "${ifname}" metric "${wanpriority}" > /dev/null 2>&1
				/sbin/route del -net default gw "${gtway}" dev "${ifname}" metric "${wanpriority}" > /dev/null 2>&1
				
				/bin/sleep 1                                                     
				
				#bring the interface back up.	
				#ifconfig "${ifname}" up
			fi
		fi
		
		[ ! -f /tmp/InterfaceStatus/${INTERFACE}Status ] && touch /tmp/InterfaceStatus/${INTERFACE}Status
		echo "`date` Interface ${INTERFACE} DOWN" >> /tmp/InterfaceStatus/${INTERFACE}Status
		echo "`date` Interface ${INTERFACE} DOWN" >> "$mwan3log"
		echo "0" > /tmp/networkstatus
		
		#restart for pptp.
		killall -9 /usr/sbin/pppd > /dev/null 2>&1		
		
		Check_IPSEC $INTERFACE
	
        if [ "$OpenvpnEnable" = "1" ] ; then                             
         /etc/init.d/openvpn restart                                      
        fi    
        if [ "${NMS_Enable}" = "1" ]
        then
        	/etc/init.d/openvpn restart
       fi  
	   
	fi
	
	###################################################################
	
	#ifup EWAN1
	if [ "${ACTION}" = "ifup" ]
	then                         
		# Do something on an ifup event for the wan interface only
		echo "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM " Logfile1
		echo "$date:<mwan3.user> ${INTERFACE} ${ACTION}" Logfile1
		echo "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM " Logfile1
		
		if [ "$policy_type" = "balanced" ]
		then
			
			if [[ "$protocol" = "static" ]]
			then
				/sbin/route del -net default gw "${staticgateway}" dev "${ifname}" metric "1" > /dev/null 2>&1
				/sbin/route del -net default gw "${staticgateway}" dev "${ifname}" metric "${metric_value}000" > /dev/null 2>&1
				/sbin/route del -net default gw "${staticgateway}" dev "${ifname}" metric "${metric_value}00" > /dev/null 2>&1
				/sbin/route del -net default gw "${staticgateway}" dev "${ifname}" metric "${wanpriority}" > /dev/null 2>&1
				/sbin/route del -net default gw "${staticgateway}" dev "${ifname}" metric "${wanpriority}000" > /dev/null 2>&1
				/sbin/route del -net default gw "${staticgateway}" dev "${ifname}" metric "${wanpriority}00" > /dev/null 2>&1
				/bin/sleep 1
				
				/sbin/route add -net default gw "${staticgateway}" dev "${ifname}" metric "1" > /dev/null 2>&1
			
			elif [[ "$protocol" = "dhcpclient" ]]
			then
			
				/sbin/route del -net default gw "${dhcpgateway}" dev "${ifname}" metric "1" > /dev/null 2>&1
				/sbin/route del -net default gw "${dhcpgateway}" dev "${ifname}" metric "${metric_value}000" > /dev/null 2>&1
				/sbin/route del -net default gw "${dhcpgateway}" dev "${ifname}" metric "${metric_value}00" > /dev/null 2>&1
				/sbin/route del -net default gw "${dhcpgateway}" dev "${ifname}" metric "${wanpriority}" > /dev/null 2>&1
				
				/bin/sleep 1
				
				#if EthernetProtocolPort1wan=dhclient, manually add this because all the metrices are same (0) for balanced.
				gtway=$(ifstatus $INTERFACE  | grep -i "nexthop" | cut -d "\"" -f 4)
				
				#/sbin/route del -net default gw "${gtway}" dev "${ifname}" metric "1" > /dev/null 2>&1
				/sbin/route add -net default gw "${gtway}" dev "${ifname}" metric "1" > /dev/null 2>&1
			
			elif [[ "$protocol" = "pppoe" ]]
			then
				/sbin/route del -net default gw "${pppoegateway}" dev "${ifname}" metric "1" > /dev/null 2>&1
				/sbin/route del -net default gw "${pppoegateway}" dev "${ifname}" metric "${metric_value}000" > /dev/null 2>&1
				/sbin/route del -net default gw "${pppoegateway}" dev "${ifname}" metric "${metric_value}00" > /dev/null 2>&1
				/sbin/route del -net default gw "${pppoegateway}" dev "${ifname}" metric "${wanpriority}" > /dev/null 2>&1
				
				/bin/sleep 1
				
				#if EthernetProtocolPort1wan=dhclient, manually add this because all the metrices are same (0) for balanced.
				gtway=$(ifstatus $INTERFACE  | grep -i "nexthop" | cut -d "\"" -f 4)
				
				/sbin/route del -net default gw "${gtway}" dev "${ifname}" metric "1" > /dev/null 2>&1
				/sbin/route add -net default gw "${gtway}" dev "${ifname}" metric "1" > /dev/null 2>&1
			fi
		
		elif [ "$policy_type" = "failover" ]
		then
			if [ "$protocol" = "static" ]
			then
				/sbin/route del -net default gw "${staticgateway}" dev "${ifname}" metric "1" > /dev/null 2>&1
				/sbin/route del -net default gw "${staticgateway}" dev "${ifname}" metric "${metric_value}000" > /dev/null 2>&1
				/sbin/route del -net default gw "${staticgateway}" dev "${ifname}" metric "${metric_value}00" > /dev/null 2>&1
				/sbin/route del -net default gw "${staticgateway}" dev "${ifname}" metric "${wanpriority}" > /dev/null 2>&1
				/sbin/route del -net default gw "${staticgateway}" dev "${ifname}" metric "${wanpriority}000" > /dev/null 2>&1
				/sbin/route del -net default gw "${staticgateway}" dev "${ifname}" metric "${wanpriority}00" > /dev/null 2>&1
				
				/bin/sleep 1
				
				/sbin/route add -net default gw "${staticgateway}" dev "${ifname}" metric "${wanpriority}" > /dev/null 2>&1
			#if EthernetProtocolPort1wan=dhcplient, netifd takes care of the routing table.
			
			elif [[ "$protocol" = "dhcpclient" ]]
			then
				echo "$date:<mwan3.user> dhcp failover ifup " >> $Logfile1
				echo "$date:<mwan3.user> ${dhcpgateway}, ${gtway}, ${ifname}, ${wanpriority}, ${wanpriority}000 " >> $Logfile1
				
				if [ ${#wanpriority} -eq 1 ]; then
					new_wanpriority=${wanpriority}000
				else
					new_wanpriority=${wanpriority}00
				fi
				track_ip=$(uci get mwan3config.$INTERFACE.trackIp1)
				
				if ! fping -I $ifname -q -c 3 $track_ip &> /dev/null
				then
					echo "$date:<mwan3.user> Ping FAILED on $ifname to $track_ip" >> $Logfile1
					#Have to set once again in wan as sometimes, it shows false pings and then resets the metric.
					#But ifdown doesn't appear once again. Hence, we get wrong metric.
					#echo "$date:<mwan3.user> setting priority=$new_wanpriority in network config." >> $Logfile1
					#echo "$date:<mwan3.user> network.$INTERFACE.metric=$new_wanpriority." >> $Logfile1
					uci set network.$INTERFACE.metric=$new_wanpriority
					uci commit network
				else
					#echo "$date:<mwan3.user> Ping PASSED on $ifname to $track_ip" >> $Logfile1
					#echo "$date:<mwan3.user> Retaining the same priority=$wanpriority in network config." >> $Logfile1
					
					uci set network.$INTERFACE.metric=$wanpriority
					uci commit network
				fi
				
				ubus call network reload 
			
			fi
		fi
		
		[ ! -f /tmp/InterfaceStatus/${INTERFACE}Status ] && touch /tmp/InterfaceStatus/${INTERFACE}Status
		echo "`date` Interface ${INTERFACE} UP" >> /tmp/InterfaceStatus/${INTERFACE}Status
		echo "`date` Interface ${INTERFACE} UP" >> "$mwan3log"
		echo "1" > /tmp/networkstatus
		
		if [ "$pptp_status" = "1" ]
		then
			config_foreach CHECK_PPTP service $INTERFACE
		else
			DISABLE_PPTP
		fi
		
		if [ "$l2tp_status" = "1" ]
		then
			config_foreach CHECK_L2TP servicel2tp $INTERFACE
		else
			DISABLE_L2TP	
		fi
		
		#Check for ipsec
		Check_IPSEC $INTERFACE
	
		if [ "$OpenvpnEnable" = "1" ] ; then                             
			/etc/init.d/openvpn restart                                      
		fi    
		if [ "${NMS_Enable}" = "1" ]
		then
			/etc/init.d/openvpn restart
		fi   

	fi   

}

#PPTP
pptp_status=$(uci get vpnconfig1.general.enablepptpgeneral)
if [ "$pptp_status" = "1" ]
then
	config_load "$PptpdUCIPath"
else
	DISABLE_PPTP	
fi

######################################################
#PPTP
l2tp_status=$(uci get vpnconfig1.general.enableL2TPgeneral)
if [ "$l2tp_status" = "1" ]
then
	config_load "$L2tpdUCIPath"
fi
#####################################################

if [ "${INTERFACE}" = "WIFI_WAN" ] || [ "${INTERFACE}" = "CWAN1_0" ] || [ "${INTERFACE}" = "wan6c1" ] || [ "${INTERFACE}" = "CWAN1_1" ] || [ "${INTERFACE}" = "wan6c2" ] || [ "${INTERFACE}" = "CWAN1" ] || [ "${INTERFACE}" = "CWAN2" ]
then
      echo "hi"
else
	EthernetInterfaces $ACTION $INTERFACE
fi


logrotate "$LogrotateConfigFile"
/bin/routing.sh
